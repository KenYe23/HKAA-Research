# -*- coding: utf-8 -*-
"""Obesity HKAA Statistical Analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XPQbBEDzpTTYyEdaWd09ppBzzK_aoduo

# Load Packages & Data
"""

import pkg_resources
try:
    pkg_resources.get_distribution('pingouin')
except pkg_resources.DistributionNotFound:
    !pip install pingouin

import pandas as pd
import numpy as np
import pingouin as pg
import scipy.stats as stats
import statsmodels.stats.multicomp as multi
import statsmodels.api as sm
pd.set_option('display.max.columns', None) # display all columns
pd.set_option('display.float_format', '{:.3f}'.format)

df = pd.read_excel('/content/drive/MyDrive/PT Research/data/final_updated_validation_dataset_v2.1.xlsx')
df.head()

df[df['LATERALITY'] == 2]

# treat rater_1 as one person, otherwise ICC can't be calculated
df['rater_1_id'] = 1
df.head()

# check number of patients with two surgical legs
df[df.LATERALITY == 2]

"""There are 4 patients with two surgical legs

# Task 1: Compare reliability of annotations by right / left leg

## Calculate means

### Right leg
"""

# rater 1 avg
# right leg
df['rater_1_R_HKAA'].mean().round(3)

# rater 2 avg
# right leg
df['rater_2_R_HKAA'].mean().round(3)

"""### Left leg"""

# rater 1 avg
# left leg
df['rater_1_L_HKAA'].mean().round(3)

# rater 2 avg
# left leg
df['rater_2_L_HKAA'].mean().round(3)

"""## Calculate IRRs

### Right leg
"""

# right leg IRR
df_right1 = df[['RECORD_ID', 'rater_1_id', 'rater_1_R_HKAA']].rename(columns = {'rater_1_id' : 'rater_id', 'rater_1_R_HKAA' : 'rater_R_HKAA' })
df_right2 = df[['RECORD_ID', 'rater_2_id', 'rater_2_R_HKAA']].rename(columns = {'rater_2_id' : 'rater_id', 'rater_2_R_HKAA' : 'rater_R_HKAA' })
df_right = pd.concat([df_right1, df_right2], axis = 0)
icc_right = pg.intraclass_corr(data = df_right, targets = 'RECORD_ID', raters = 'rater_id', ratings = 'rater_R_HKAA').round(3)
icc_right.set_index('Type')

"""The interrater reliability is 0.989 for the right leg.

### Left leg
"""

# left leg IRR
df_left1 = df[['RECORD_ID', 'rater_1_id', 'rater_1_L_HKAA']].rename(columns = {'rater_1_id' : 'rater_id', 'rater_1_L_HKAA' : 'rater_L_HKAA' })
df_left2 = df[['RECORD_ID', 'rater_2_id', 'rater_2_L_HKAA']].rename(columns = {'rater_2_id' : 'rater_id', 'rater_2_L_HKAA' : 'rater_L_HKAA' })
df_left = pd.concat([df_left1, df_left2], axis = 0)
icc_left = pg.intraclass_corr(data = df_left, targets = 'RECORD_ID', raters = 'rater_id', ratings = 'rater_L_HKAA').round(3)
icc_left.set_index('Type')

"""The interrater reliability is 0.981 for the left leg.

# Task 2: Compare reliability of annotations by surgical / non-surgical leg

## Calculate means
"""

# LATERALITY 0 = right, 1 = left, 2 = bilateral
df_surg_right = df[(df['LATERALITY'] == 0) | (df['LATERALITY'] == 2)]
df_surg_left = df[(df['LATERALITY'] == 1) |  (df['LATERALITY'] == 2)]

"""### Surgical leg"""

# rater 1 avg
# surgical leg
((df_surg_left['rater_1_L_HKAA'].sum() + df_surg_right['rater_1_R_HKAA'].sum()) / (len(df_surg_left) + len(df_surg_right))).round(3)

# rater 2 avg
# surgical leg
((df_surg_left['rater_2_L_HKAA'].sum() + df_surg_right['rater_2_R_HKAA'].sum()) / (len(df_surg_left) + len(df_surg_right))).round(3)

"""### Non-surgical leg"""

# rater 1 avg
# non-surgical leg
((df_surg_left['rater_1_R_HKAA'].sum() + df_surg_right['rater_1_L_HKAA'].sum()) / (len(df_surg_left) + len(df_surg_right))).round(3)

# rater 2 avg
# non-surgical leg
((df_surg_left['rater_2_R_HKAA'].sum() + df_surg_right['rater_2_L_HKAA'].sum()) / (len(df_surg_left) + len(df_surg_right))).round(3)

"""## Calculate IRRs

### Surgical leg
"""

# rater 1 surgical leg dataframe
df_surg_left1 = df_surg_left[['RECORD_ID', 'rater_1_id', 'rater_1_L_HKAA']].rename(columns = {'rater_1_id' : 'rater_id', 'rater_1_L_HKAA' : 'rater_surg_HKAA' })
df_surg_right1 =  df_surg_right[['RECORD_ID', 'rater_1_id', 'rater_1_R_HKAA']].rename(columns = {'rater_1_id' : 'rater_id', 'rater_1_R_HKAA' : 'rater_surg_HKAA' })
df_surg1 = pd.concat([df_surg_left1, df_surg_right1], axis = 0)

# rater 2 surgical leg dataframe
df_surg_left2 = df_surg_left[['RECORD_ID', 'rater_2_id', 'rater_2_L_HKAA']].rename(columns = {'rater_2_id' : 'rater_id', 'rater_2_L_HKAA' : 'rater_surg_HKAA' })
df_surg_right2 =  df_surg_right[['RECORD_ID', 'rater_2_id', 'rater_2_R_HKAA']].rename(columns = {'rater_2_id' : 'rater_id', 'rater_2_R_HKAA' : 'rater_surg_HKAA' })
df_surg2 = pd.concat([df_surg_left2, df_surg_right2], axis = 0)

# surgical leg IRR
df_surg = pd.concat([df_surg1, df_surg2], axis = 0)
icc_surg = pg.intraclass_corr(data = df_surg, targets = 'RECORD_ID', raters = 'rater_id', ratings = 'rater_surg_HKAA').round(3)
icc_surg.set_index('Type')

"""The interrater reliability is 0.981 for the surgical leg.

### Non-surgical leg
"""

# rater 1 non-surgical leg dataframe
df_nsurg_left1 = df_surg_left[['RECORD_ID', 'rater_1_id', 'rater_1_R_HKAA']].rename(columns = {'rater_1_id' : 'rater_id', 'rater_1_R_HKAA' : 'rater_nsurg_HKAA' })
df_nsurg_right1 =  df_surg_right[['RECORD_ID', 'rater_1_id', 'rater_1_L_HKAA']].rename(columns = {'rater_1_id' : 'rater_id', 'rater_1_L_HKAA' : 'rater_nsurg_HKAA' })
df_nsurg1 = pd.concat([df_nsurg_left1, df_nsurg_right1], axis = 0)

# rater 2 non-surgical leg dataframe
df_nsurg_left2 = df_surg_left[['RECORD_ID', 'rater_2_id', 'rater_2_R_HKAA']].rename(columns = {'rater_2_id' : 'rater_id', 'rater_2_R_HKAA' : 'rater_nsurg_HKAA' })
df_nsurg_right2 =  df_surg_right[['RECORD_ID', 'rater_2_id', 'rater_2_L_HKAA']].rename(columns = {'rater_2_id' : 'rater_id', 'rater_2_L_HKAA' : 'rater_nsurg_HKAA' })
df_nsurg2 = pd.concat([df_nsurg_left2, df_nsurg_right2], axis = 0)

# non-surgical leg IRR
df_nsurg = pd.concat([df_nsurg1, df_nsurg2], axis = 0)
icc_nsurg = pg.intraclass_corr(data = df_nsurg, targets = 'RECORD_ID', raters = 'rater_id', ratings = 'rater_nsurg_HKAA').round(3)
icc_nsurg.set_index('Type')

"""The interrater reliability is 0.987 for the non-surgical leg.

# Task 3: Compare reliability of annotations by by surgical / non-surgical leg & weight class
"""

# BMI_CLASS -1 = underweight, 0 = normal, 1 = overweight, 2 = obesity class 1, 3 = obesity class 2, 4 = obesity class 3, 5 = obesity class 4, 6 = obesity class 5
df['BMI_CLASS'].value_counts(dropna=False)

"""## Calculate means

### Surgical leg

#### Underweight
"""

# surgical leg
# rater 1 avg
# underweight
((df_surg_left[df_surg_left['BMI_CLASS'] == -1]['rater_1_L_HKAA'].sum() +
  df_surg_right[df_surg_right['BMI_CLASS'] == -1]['rater_1_R_HKAA'].sum()) /
   (len(df_surg_left[df_surg_left['BMI_CLASS'] == -1]) +
    len(df_surg_right[df_surg_right['BMI_CLASS'] == -1]))).round(3)

# surgical leg
# rater 2 avg
# underweight
((df_surg_left[df_surg_left['BMI_CLASS'] == -1]['rater_2_L_HKAA'].sum() +
  df_surg_right[df_surg_right['BMI_CLASS'] == -1]['rater_2_R_HKAA'].sum()) /
   (len(df_surg_left[df_surg_left['BMI_CLASS'] == -1]) +
    len(df_surg_right[df_surg_right['BMI_CLASS'] == -1]))).round(3)

"""#### Normal"""

# surgical leg
# rater 1 avg
# normal
((df_surg_left[df_surg_left['BMI_CLASS'] == 0]['rater_1_L_HKAA'].sum() +
  df_surg_right[df_surg_right['BMI_CLASS'] == 0]['rater_1_R_HKAA'].sum()) /
   (len(df_surg_left[df_surg_left['BMI_CLASS'] == 0]) +
    len(df_surg_right[df_surg_right['BMI_CLASS'] == 0]))).round(3)

# surgical leg
# rater 2 avg
# normal
((df_surg_left[df_surg_left['BMI_CLASS'] == 0]['rater_2_L_HKAA'].sum() +
  df_surg_right[df_surg_right['BMI_CLASS'] == 0]['rater_2_R_HKAA'].sum()) /
   (len(df_surg_left[df_surg_left['BMI_CLASS'] == 0]) +
    len(df_surg_right[df_surg_right['BMI_CLASS'] == 0]))).round(3)

"""#### Overweight"""

# surgical leg
# rater 1 avg
# overweight
((df_surg_left[df_surg_left['BMI_CLASS'] == 1]['rater_1_L_HKAA'].sum() +
  df_surg_right[df_surg_right['BMI_CLASS'] == 1]['rater_1_R_HKAA'].sum()) /
   (len(df_surg_left[df_surg_left['BMI_CLASS'] == 1]) +
    len(df_surg_right[df_surg_right['BMI_CLASS'] == 1]))).round(3)

# surgical leg
# rater 2 avg
# overweight
((df_surg_left[df_surg_left['BMI_CLASS'] == 1]['rater_2_L_HKAA'].sum() +
  df_surg_right[df_surg_right['BMI_CLASS'] == 1]['rater_2_R_HKAA'].sum()) /
   (len(df_surg_left[df_surg_left['BMI_CLASS'] == 1]) +
    len(df_surg_right[df_surg_right['BMI_CLASS'] == 1]))).round(3)

"""#### Class 1"""

# surgical leg
# rater 1 avg
# obesity class 1
((df_surg_left[df_surg_left['BMI_CLASS'] == 2]['rater_1_L_HKAA'].sum() +
  df_surg_right[df_surg_right['BMI_CLASS'] == 2]['rater_1_R_HKAA'].sum()) /
   (len(df_surg_left[df_surg_left['BMI_CLASS'] == 2]) +
    len(df_surg_right[df_surg_right['BMI_CLASS'] == 2]))).round(3)

# surgical leg
# rater 2 avg
# obesity class 1
((df_surg_left[df_surg_left['BMI_CLASS'] == 2]['rater_2_L_HKAA'].sum() +
  df_surg_right[df_surg_right['BMI_CLASS'] == 2]['rater_2_R_HKAA'].sum()) /
   (len(df_surg_left[df_surg_left['BMI_CLASS'] == 2]) +
    len(df_surg_right[df_surg_right['BMI_CLASS'] == 2]))).round(3)

"""#### Class 2"""

# surgical leg
# rater 1 avg
# obesity class 2
((df_surg_left[df_surg_left['BMI_CLASS'] == 3]['rater_1_L_HKAA'].sum() +
  df_surg_right[df_surg_right['BMI_CLASS'] == 3]['rater_1_R_HKAA'].sum()) /
   (len(df_surg_left[df_surg_left['BMI_CLASS'] == 3]) +
    len(df_surg_right[df_surg_right['BMI_CLASS'] == 3]))).round(3)

# surgical leg
# rater 2 avg
# obesity class 2
((df_surg_left[df_surg_left['BMI_CLASS'] == 3]['rater_2_L_HKAA'].sum() +
  df_surg_right[df_surg_right['BMI_CLASS'] == 3]['rater_2_R_HKAA'].sum()) /
   (len(df_surg_left[df_surg_left['BMI_CLASS'] == 3]) +
    len(df_surg_right[df_surg_right['BMI_CLASS'] == 3]))).round(3)

"""#### Class 3"""

# surgical leg
# rater 1 avg
# obesity class 3
((df_surg_left[df_surg_left['BMI_CLASS'] == 4]['rater_1_L_HKAA'].sum() +
  df_surg_right[df_surg_right['BMI_CLASS'] == 4]['rater_1_R_HKAA'].sum()) /
   (len(df_surg_left[df_surg_left['BMI_CLASS'] == 4]) +
    len(df_surg_right[df_surg_right['BMI_CLASS'] == 4]))).round(3)

# surgical leg
# rater 2 avg
# obesity class 3
((df_surg_left[df_surg_left['BMI_CLASS'] == 4]['rater_2_L_HKAA'].sum() +
  df_surg_right[df_surg_right['BMI_CLASS'] == 4]['rater_2_R_HKAA'].sum()) /
   (len(df_surg_left[df_surg_left['BMI_CLASS'] == 4]) +
    len(df_surg_right[df_surg_right['BMI_CLASS'] == 4]))).round(3)

"""#### Class 4"""

# surgical leg
# rater 1 avg
# obesity class 4
((df_surg_left[df_surg_left['BMI_CLASS'] == 5]['rater_1_L_HKAA'].sum() +
  df_surg_right[df_surg_right['BMI_CLASS'] == 5]['rater_1_R_HKAA'].sum()) /
   (len(df_surg_left[df_surg_left['BMI_CLASS'] == 5]) +
    len(df_surg_right[df_surg_right['BMI_CLASS'] == 5]))).round(3)

# surgical leg
# rater 2 avg
# obesity class 4
((df_surg_left[df_surg_left['BMI_CLASS'] == 5]['rater_2_L_HKAA'].sum() +
  df_surg_right[df_surg_right['BMI_CLASS'] == 5]['rater_2_R_HKAA'].sum()) /
   (len(df_surg_left[df_surg_left['BMI_CLASS'] == 5]) +
    len(df_surg_right[df_surg_right['BMI_CLASS'] == 5]))).round(3)

"""### Non-surgical leg

#### Underweight
"""

# non-surgical leg
# rater 1 avg
# underweight
((df_surg_left[df_surg_left['BMI_CLASS'] == -1]['rater_1_R_HKAA'].sum() +
  df_surg_right[df_surg_right['BMI_CLASS'] == -1]['rater_1_L_HKAA'].sum()) /
   (len(df_surg_left[df_surg_left['BMI_CLASS'] == -1]) +
    len(df_surg_right[df_surg_right['BMI_CLASS'] == -1]))).round(3)

# non-surgical leg
# rater 2 avg
# underweight
((df_surg_left[df_surg_left['BMI_CLASS'] == -1]['rater_2_R_HKAA'].sum() +
  df_surg_right[df_surg_right['BMI_CLASS'] == -1]['rater_2_L_HKAA'].sum()) /
   (len(df_surg_left[df_surg_left['BMI_CLASS'] == -1]) +
    len(df_surg_right[df_surg_right['BMI_CLASS'] == -1]))).round(3)

"""#### Normal"""

# non-surgical leg
# rater 1 avg
# normal
((df_surg_left[df_surg_left['BMI_CLASS'] == 0]['rater_1_R_HKAA'].sum() +
  df_surg_right[df_surg_right['BMI_CLASS'] == 0]['rater_1_L_HKAA'].sum()) /
   (len(df_surg_left[df_surg_left['BMI_CLASS'] == 0]) +
    len(df_surg_right[df_surg_right['BMI_CLASS'] == 0]))).round(3)

# non-surgical leg
# rater 2 avg
# normal
((df_surg_left[df_surg_left['BMI_CLASS'] == 0]['rater_2_R_HKAA'].sum() +
  df_surg_right[df_surg_right['BMI_CLASS'] == 0]['rater_2_L_HKAA'].sum()) /
   (len(df_surg_left[df_surg_left['BMI_CLASS'] == 0]) +
    len(df_surg_right[df_surg_right['BMI_CLASS'] == 0]))).round(3)

"""#### Overweight"""

# non-surgical leg
# rater 1 avg
# overweight
((df_surg_left[df_surg_left['BMI_CLASS'] == 1]['rater_1_R_HKAA'].sum() +
  df_surg_right[df_surg_right['BMI_CLASS'] == 1]['rater_1_L_HKAA'].sum()) /
   (len(df_surg_left[df_surg_left['BMI_CLASS'] == 1]) +
    len(df_surg_right[df_surg_right['BMI_CLASS'] == 1]))).round(3)

# non-surgical leg
# rater 2 avg
# overweight
((df_surg_left[df_surg_left['BMI_CLASS'] == 1]['rater_2_R_HKAA'].sum() +
  df_surg_right[df_surg_right['BMI_CLASS'] == 1]['rater_2_L_HKAA'].sum()) /
   (len(df_surg_left[df_surg_left['BMI_CLASS'] == 1]) +
    len(df_surg_right[df_surg_right['BMI_CLASS'] == 1]))).round(3)

"""#### Class 1"""

# non-surgical leg
# rater 1 avg
# obesity class 1
((df_surg_left[df_surg_left['BMI_CLASS'] == 2]['rater_1_R_HKAA'].sum() +
  df_surg_right[df_surg_right['BMI_CLASS'] == 2]['rater_1_L_HKAA'].sum()) /
   (len(df_surg_left[df_surg_left['BMI_CLASS'] == 2]) +
    len(df_surg_right[df_surg_right['BMI_CLASS'] == 2]))).round(3)

# non-surgical leg
# rater 2 avg
# obesity class 1
((df_surg_left[df_surg_left['BMI_CLASS'] == 2]['rater_2_R_HKAA'].sum() +
  df_surg_right[df_surg_right['BMI_CLASS'] == 2]['rater_2_L_HKAA'].sum()) /
   (len(df_surg_left[df_surg_left['BMI_CLASS'] == 2]) +
    len(df_surg_right[df_surg_right['BMI_CLASS'] == 2]))).round(3)

"""#### Class 2"""

# non-surgical leg
# rater 1 avg
# obesity class 2
((df_surg_left[df_surg_left['BMI_CLASS'] == 3]['rater_1_R_HKAA'].sum() +
  df_surg_right[df_surg_right['BMI_CLASS'] == 3]['rater_1_L_HKAA'].sum()) /
   (len(df_surg_left[df_surg_left['BMI_CLASS'] == 3]) +
    len(df_surg_right[df_surg_right['BMI_CLASS'] == 3]))).round(3)

# non-surgical leg
# rater 2 avg
# obesity class 2
((df_surg_left[df_surg_left['BMI_CLASS'] == 3]['rater_2_R_HKAA'].sum() +
  df_surg_right[df_surg_right['BMI_CLASS'] == 3]['rater_2_L_HKAA'].sum()) /
   (len(df_surg_left[df_surg_left['BMI_CLASS'] == 3]) +
    len(df_surg_right[df_surg_right['BMI_CLASS'] == 3]))).round(3)

"""#### Class 3"""

# non-surgical leg
# rater 1 avg
# obesity class 3
((df_surg_left[df_surg_left['BMI_CLASS'] == 4]['rater_1_R_HKAA'].sum() +
  df_surg_right[df_surg_right['BMI_CLASS'] == 4]['rater_1_L_HKAA'].sum()) /
   (len(df_surg_left[df_surg_left['BMI_CLASS'] == 4]) +
    len(df_surg_right[df_surg_right['BMI_CLASS'] == 4]))).round(3)

# non-surgical leg
# rater 2 avg
# obesity class 3
((df_surg_left[df_surg_left['BMI_CLASS'] == 4]['rater_2_R_HKAA'].sum() +
  df_surg_right[df_surg_right['BMI_CLASS'] == 4]['rater_2_L_HKAA'].sum()) /
   (len(df_surg_left[df_surg_left['BMI_CLASS'] == 4]) +
    len(df_surg_right[df_surg_right['BMI_CLASS'] == 4]))).round(3)

"""#### Class 4"""

# non-surgical leg
# rater 1 avg
# obesity class 4
((df_surg_left[df_surg_left['BMI_CLASS'] == 5]['rater_1_R_HKAA'].sum() +
  df_surg_right[df_surg_right['BMI_CLASS'] == 5]['rater_1_L_HKAA'].sum()) /
   (len(df_surg_left[df_surg_left['BMI_CLASS'] == 5]) +
    len(df_surg_right[df_surg_right['BMI_CLASS'] == 5]))).round(3)

# non-surgical leg
# rater 2 avg
# obesity class 4
((df_surg_left[df_surg_left['BMI_CLASS'] == 5]['rater_2_R_HKAA'].sum() +
  df_surg_right[df_surg_right['BMI_CLASS'] == 5]['rater_2_L_HKAA'].sum()) /
   (len(df_surg_left[df_surg_left['BMI_CLASS'] == 5]) +
    len(df_surg_right[df_surg_right['BMI_CLASS'] == 5]))).round(3)

"""## Calculate IRRs

### Surgical leg
"""

# rater 1 surgical leg dataframe
df_surg_left1 = df_surg_left[['RECORD_ID', 'rater_1_id', 'rater_1_L_HKAA', 'BMI_CLASS']].rename(columns = {'rater_1_id' : 'rater_id', 'rater_1_L_HKAA' : 'rater_surg_HKAA' })
df_surg_right1 =  df_surg_right[['RECORD_ID', 'rater_1_id', 'rater_1_R_HKAA', 'BMI_CLASS']].rename(columns = {'rater_1_id' : 'rater_id', 'rater_1_R_HKAA' : 'rater_surg_HKAA' })
df_surg1 = pd.concat([df_surg_left1, df_surg_right1], axis = 0)

# rater 2 surgical leg dataframe
df_surg_left2 = df_surg_left[['RECORD_ID', 'rater_2_id', 'rater_2_L_HKAA', 'BMI_CLASS']].rename(columns = {'rater_2_id' : 'rater_id', 'rater_2_L_HKAA' : 'rater_surg_HKAA' })
df_surg_right2 =  df_surg_right[['RECORD_ID', 'rater_2_id', 'rater_2_R_HKAA', 'BMI_CLASS']].rename(columns = {'rater_2_id' : 'rater_id', 'rater_2_R_HKAA' : 'rater_surg_HKAA' })
df_surg2 = pd.concat([df_surg_left2, df_surg_right2], axis = 0)

# combined surgical leg dataframe
df_surg = pd.concat([df_surg1, df_surg2], axis = 0)

"""#### Underweight"""

# surgical leg
# obesity class: underweight
# IRR
icc_surg = pg.intraclass_corr(data = df_surg[df_surg['BMI_CLASS'] == -1], targets = 'RECORD_ID', raters = 'rater_id', ratings = 'rater_surg_HKAA').round(3)
icc_surg.set_index('Type')

"""The interrater reliability is 0.995 for the surgical leg for underweight obesity class.

#### Normal
"""

# surgical leg
# obesity class: normal
# IRR
icc_surg = pg.intraclass_corr(data = df_surg[df_surg['BMI_CLASS'] == 0], targets = 'RECORD_ID', raters = 'rater_id', ratings = 'rater_surg_HKAA').round(3)
icc_surg.set_index('Type')

"""The interrater reliability is 0.919 for the surgical leg for normal obesity class.

#### Overweight
"""

# surgical leg
# obesity class: overweight
# IRR
icc_surg = pg.intraclass_corr(data = df_surg[df_surg['BMI_CLASS'] == 1], targets = 'RECORD_ID', raters = 'rater_id', ratings = 'rater_surg_HKAA').round(3)
icc_surg.set_index('Type')

"""The interrater reliability is 0.994 for the surgical leg for overweight obesity class.

#### Class 1
"""

# surgical leg
# obesity class: class 1
# IRR
icc_surg = pg.intraclass_corr(data = df_surg[df_surg['BMI_CLASS'] == 2], targets = 'RECORD_ID', raters = 'rater_id', ratings = 'rater_surg_HKAA').round(3)
icc_surg.set_index('Type')

"""The interrater reliability is 0.995 for the surgical leg for class 1 obesity class.

#### Class 2
"""

# surgical leg
# obesity class: class 2
# IRR
icc_surg = pg.intraclass_corr(data = df_surg[df_surg['BMI_CLASS'] == 3], targets = 'RECORD_ID', raters = 'rater_id', ratings = 'rater_surg_HKAA').round(3)
icc_surg.set_index('Type')

"""The interrater reliability is 0.992 for the surgical leg for class 2 obesity class.

#### Class 3
"""

# surgical leg
# obesity class: class 3
# IRR
icc_surg = pg.intraclass_corr(data = df_surg[df_surg['BMI_CLASS'] == 4], targets = 'RECORD_ID', raters = 'rater_id', ratings = 'rater_surg_HKAA').round(3)
icc_surg.set_index('Type')

"""The interrater reliability is 0.992 for the surgical leg for class 3 obesity class.

#### Class 4
"""

# surgical leg
# obesity class: class 4
# IRR
icc_surg = pg.intraclass_corr(data = df_surg[df_surg['BMI_CLASS'] == 5], targets = 'RECORD_ID', raters = 'rater_id', ratings = 'rater_surg_HKAA').round(3)
icc_surg.set_index('Type')

"""The interrater reliability is 0.993 for the surgical leg for class 4 obesity class.

### Non-surgical leg
"""

# rater 1 non-surgical leg dataframe
df_nsurg_left1 = df_surg_left[['RECORD_ID', 'rater_1_id', 'rater_1_R_HKAA', 'BMI_CLASS']].rename(columns = {'rater_1_id' : 'rater_id', 'rater_1_R_HKAA' : 'rater_nsurg_HKAA' })
df_nsurg_right1 =  df_surg_right[['RECORD_ID', 'rater_1_id', 'rater_1_L_HKAA', 'BMI_CLASS']].rename(columns = {'rater_1_id' : 'rater_id', 'rater_1_L_HKAA' : 'rater_nsurg_HKAA' })
df_nsurg1 = pd.concat([df_nsurg_left1, df_nsurg_right1], axis = 0)

# rater 2 non-surgical leg dataframe
df_nsurg_left2 = df_surg_left[['RECORD_ID', 'rater_2_id', 'rater_2_R_HKAA', 'BMI_CLASS']].rename(columns = {'rater_2_id' : 'rater_id', 'rater_2_R_HKAA' : 'rater_nsurg_HKAA' })
df_nsurg_right2 =  df_surg_right[['RECORD_ID', 'rater_2_id', 'rater_2_L_HKAA', 'BMI_CLASS']].rename(columns = {'rater_2_id' : 'rater_id', 'rater_2_L_HKAA' : 'rater_nsurg_HKAA' })
df_nsurg2 = pd.concat([df_nsurg_left2, df_nsurg_right2], axis = 0)

# combined non-surgical leg dataframe
df_nsurg = pd.concat([df_nsurg1, df_nsurg2], axis = 0)

"""#### Underweight"""

# non-surgical leg
# obesity class: underweight
# IRR
icc_nsurg = pg.intraclass_corr(data = df_nsurg[df_nsurg['BMI_CLASS'] == -1], targets = 'RECORD_ID', raters = 'rater_id', ratings = 'rater_nsurg_HKAA').round(3)
icc_nsurg.set_index('Type')

"""The interrater reliability is 0.984 for the non-surgical leg for underweight obesity class.

#### Normal
"""

# non-surgical leg
# obesity class: normal
# IRR
icc_nsurg = pg.intraclass_corr(data = df_nsurg[df_nsurg['BMI_CLASS'] == 0], targets = 'RECORD_ID', raters = 'rater_id', ratings = 'rater_nsurg_HKAA').round(3)
icc_nsurg.set_index('Type')

"""The interrater reliability is 0.980 for the non-surgical leg for normal obesity class.

#### Overweight
"""

# non-surgical leg
# obesity class: overweight
# IRR
icc_nsurg = pg.intraclass_corr(data = df_nsurg[df_nsurg['BMI_CLASS'] == 1], targets = 'RECORD_ID', raters = 'rater_id', ratings = 'rater_nsurg_HKAA').round(3)
icc_nsurg.set_index('Type')

"""The interrater reliability is 0.983 for the non-surgical leg for overweight obesity class.

#### Class 1
"""

# non-surgical leg
# obesity class: class 1
# IRR
icc_nsurg = pg.intraclass_corr(data = df_nsurg[df_nsurg['BMI_CLASS'] == 2], targets = 'RECORD_ID', raters = 'rater_id', ratings = 'rater_nsurg_HKAA').round(3)
icc_nsurg.set_index('Type')

"""The interrater reliability is 0.985 for the non-surgical leg for class 1 obesity class.

#### Class 2
"""

# non-surgical leg
# obesity class: class 2
# IRR
icc_nsurg = pg.intraclass_corr(data = df_nsurg[df_nsurg['BMI_CLASS'] == 3], targets = 'RECORD_ID', raters = 'rater_id', ratings = 'rater_nsurg_HKAA').round(3)
icc_nsurg.set_index('Type')

"""The interrater reliability is 0.989 for the non-surgical leg for class 2 obesity class.

#### Class 3
"""

# non-surgical leg
# obesity class: class 3
# IRR
icc_nsurg = pg.intraclass_corr(data = df_nsurg[df_nsurg['BMI_CLASS'] == 4], targets = 'RECORD_ID', raters = 'rater_id', ratings = 'rater_nsurg_HKAA').round(3)
icc_nsurg.set_index('Type')

"""The interrater reliability is 0.988 for the non-surgical leg for class 3 obesity class.

#### Class 4
"""

# non-surgical leg
# obesity class: class 4
# IRR
icc_nsurg = pg.intraclass_corr(data = df_nsurg[df_nsurg['BMI_CLASS'] == 5], targets = 'RECORD_ID', raters = 'rater_id', ratings = 'rater_nsurg_HKAA').round(3)
icc_nsurg.set_index('Type')

"""The interrater reliability is 0.978 for the non-surgical leg for class 4 obesity class.

# Task 4: One-way ANOVA

## Obesity class vs average HKAA measurement

IV = obesity class

DV = HKAA measurement average between raters

### Surgical Leg
"""

df_avg_surg_left = df_surg_left[['L_HKAA_avg_of_raters', 'BMI_CLASS']].rename(columns = {'L_HKAA_avg_of_raters' : 'HKAA_avg_surg'})
df_avg_surg_right = df_surg_right[['R_HKAA_avg_of_raters','BMI_CLASS']].rename(columns = {'R_HKAA_avg_of_raters' : 'HKAA_avg_surg'})
df_avg_surg = pd.concat([df_avg_surg_left, df_avg_surg_right])
df_avg_surg = df_avg_surg.dropna()
df_avg_surg

# calculate average HKAA_avg_surg by BMI_CLASS
avg_by_class = df_avg_surg.groupby('BMI_CLASS')['HKAA_avg_surg'].mean().round(3)
print(avg_by_class)

# calculate HKAA_avg_surg standard deviation by BMI_CLASS
avg_std = df_avg_surg.groupby('BMI_CLASS')['HKAA_avg_surg'].std().round(3)
print(avg_std)

# 95% CI
lower_bound = avg_by_class - 2 * avg_std
upper_bound = avg_by_class + 2 * avg_std

# create a new dataframe to store the results
ci_df = pd.DataFrame({
    'Mean': avg_by_class,
    'Lower Bound (95% CI)': lower_bound,
    'Upper Bound (95% CI)': upper_bound,
})

print(ci_df)

for index, row in ci_df.iterrows():
    print(f"{row['Mean']:.3f} [{row['Lower Bound (95% CI)']:.3f}, {row['Upper Bound (95% CI)']:.3f}]")

# perform one-way ANOVA
f_value, p_value = stats.f_oneway(df_avg_surg['HKAA_avg_surg'][df_avg_surg['BMI_CLASS'] == -1],
                                  df_avg_surg['HKAA_avg_surg'][df_avg_surg['BMI_CLASS'] == 0],
                                  df_avg_surg['HKAA_avg_surg'][df_avg_surg['BMI_CLASS'] == 1],
                                  df_avg_surg['HKAA_avg_surg'][df_avg_surg['BMI_CLASS'] == 2],
                                  df_avg_surg['HKAA_avg_surg'][df_avg_surg['BMI_CLASS'] == 3],
                                  df_avg_surg['HKAA_avg_surg'][df_avg_surg['BMI_CLASS'] == 4],)
print('F value:', f_value.round(3))
print('P value:', p_value.round(3))

"""There's no statistically significant difference (p > 0.05) in the mean HKAA_avg_surg between the different BMI_CLASS groups."""

# post hoc test (Tukey HSD)
posthoc = multi.MultiComparison(df_avg_surg['HKAA_avg_surg'], df_avg_surg['BMI_CLASS'])
result = posthoc.tukeyhsd()
tukey_result_df = pd.DataFrame(data=result._results_table.data[1:], columns=result._results_table.data[0])
tukey_result_df

"""### Non-surgical Leg"""

df_avg_nsurg_left = df_surg_left[['R_HKAA_avg_of_raters', 'BMI_CLASS']].rename(columns = {'R_HKAA_avg_of_raters' : 'HKAA_avg_nsurg'})
df_avg_nsurg_right = df_surg_right[['L_HKAA_avg_of_raters','BMI_CLASS']].rename(columns = {'L_HKAA_avg_of_raters' : 'HKAA_avg_nsurg'})
df_avg_nsurg = pd.concat([df_avg_nsurg_left, df_avg_nsurg_right])
df_avg_nsurg = df_avg_nsurg.dropna()
df_avg_nsurg

# calculate average HKAA_avg_nsurg by BMI_CLASS
avg_by_class = df_avg_nsurg.groupby('BMI_CLASS')['HKAA_avg_nsurg'].mean().round(3)
print(avg_by_class)

# calculate HKAA_avg_nsurg standard deviation by BMI_CLASS
avg_std = df_avg_nsurg.groupby('BMI_CLASS')['HKAA_avg_nsurg'].std().round(3)
print(avg_std)

# 95% CI
lower_bound = avg_by_class - 2 * avg_std
upper_bound = avg_by_class + 2 * avg_std

# create a new dataframe to store the results
ci_df = pd.DataFrame({
    'Mean': avg_by_class,
    'Lower Bound (95% CI)': lower_bound,
    'Upper Bound (95% CI)': upper_bound,
})

print(ci_df)

for index, row in ci_df.iterrows():
    print(f"{row['Mean']:.3f} [{row['Lower Bound (95% CI)']:.3f}, {row['Upper Bound (95% CI)']:.3f}]")

# perform one-way ANOVA
f_value, p_value = stats.f_oneway(df_avg_nsurg['HKAA_avg_nsurg'][df_avg_nsurg['BMI_CLASS'] == -1],
                                  df_avg_nsurg['HKAA_avg_nsurg'][df_avg_nsurg['BMI_CLASS'] == 0],
                                  df_avg_nsurg['HKAA_avg_nsurg'][df_avg_nsurg['BMI_CLASS'] == 1],
                                  df_avg_nsurg['HKAA_avg_nsurg'][df_avg_nsurg['BMI_CLASS'] == 2],
                                  df_avg_nsurg['HKAA_avg_nsurg'][df_avg_nsurg['BMI_CLASS'] == 3],
                                  df_avg_nsurg['HKAA_avg_nsurg'][df_avg_nsurg['BMI_CLASS'] == 4])
print('F value:', f_value.round(3))
print('P value:', p_value.round(3))

"""There's statistically significant difference (p < 0.05) in the mean HKAA_avg_nsurg between the different BMI_CLASS groups."""

# post hoc test (Tukey Hstd)
posthoc = multi.MultiComparison(df_avg_nsurg['HKAA_avg_nsurg'], df_avg_nsurg['BMI_CLASS'])
result = posthoc.tukeyhsd()
tukey_result_df = pd.DataFrame(data=result._results_table.data[1:], columns=result._results_table.data[0])
tukey_result_df

"""There's a statistically significant difference (p < 0.05) in the mean 'HKAA_avg_nsurg' between 'BMI_CLASS' normal & class 2, overweight & class 2, and class 2 & class 3.

## Obesity class vs difference of HKAA measurement

IV = obesity class

DV = HKAA measurement difference between raters

### Surgical Leg
"""

df_diff_surg_left = df_surg_left[['L_HKAA_diff_between_raters', 'BMI_CLASS']].rename(columns = {'L_HKAA_diff_between_raters' : 'HKAA_diff_surg'})
df_diff_surg_right = df_surg_right[['R_HKAA_diff_between_raters','BMI_CLASS']].rename(columns = {'R_HKAA_diff_between_raters' : 'HKAA_diff_surg'})
df_diff_surg = pd.concat([df_diff_surg_left, df_diff_surg_right])
df_diff_surg = df_diff_surg.dropna()
df_diff_surg

# calculate average HKAA_diff_surg by BMI_CLASS
avg_by_class = df_diff_surg.groupby('BMI_CLASS')['HKAA_diff_surg'].mean().round(3)
print(avg_by_class)

# calculate HKAA_diff_surg standard deviation by BMI_CLASS
avg_std = df_diff_surg.groupby('BMI_CLASS')['HKAA_diff_surg'].std().round(3)
print(avg_std)

# 95% CI
lower_bound = avg_by_class - 2 * avg_std
upper_bound = avg_by_class + 2 * avg_std

# create a new dataframe to store the results
ci_df = pd.DataFrame({
    'Mean': avg_by_class,
    'Lower Bound (95% CI)': lower_bound,
    'Upper Bound (95% CI)': upper_bound,
})

print(ci_df)

for index, row in ci_df.iterrows():
    print(f"{row['Mean']:.3f} [{row['Lower Bound (95% CI)']:.3f}, {row['Upper Bound (95% CI)']:.3f}]")

# perform one-way ANOVA
f_value, p_value = stats.f_oneway(df_diff_surg['HKAA_diff_surg'][df_diff_surg['BMI_CLASS'] == -1],
                                  df_diff_surg['HKAA_diff_surg'][df_diff_surg['BMI_CLASS'] == 0],
                                  df_diff_surg['HKAA_diff_surg'][df_diff_surg['BMI_CLASS'] == 1],
                                  df_diff_surg['HKAA_diff_surg'][df_diff_surg['BMI_CLASS'] == 2],
                                  df_diff_surg['HKAA_diff_surg'][df_diff_surg['BMI_CLASS'] == 3],
                                  df_diff_surg['HKAA_diff_surg'][df_diff_surg['BMI_CLASS'] == 4],)
print('F value:', f_value.round(3))
print('P value:', p_value.round(3))

"""There's no statistically significant difference (p > 0.05) in the mean HKAA_diff_surg between the different BMI_CLASS groups."""

# post hoc test (Tukey HSD)
posthoc = multi.MultiComparison(df_diff_surg['HKAA_diff_surg'], df_diff_surg['BMI_CLASS'])
result = posthoc.tukeyhsd()
tukey_result_df = pd.DataFrame(data=result._results_table.data[1:], columns=result._results_table.data[0])
tukey_result_df

"""### Non-surgical"""

df_diff_nsurg_left = df_surg_left[['R_HKAA_diff_between_raters', 'BMI_CLASS']].rename(columns = {'R_HKAA_diff_between_raters' : 'HKAA_diff_nsurg'})
df_diff_nsurg_right = df_surg_right[['L_HKAA_diff_between_raters','BMI_CLASS']].rename(columns = {'L_HKAA_diff_between_raters' : 'HKAA_diff_nsurg'})
df_diff_nsurg = pd.concat([df_diff_nsurg_left, df_diff_nsurg_right])
df_diff_nsurg = df_diff_nsurg.dropna()
df_diff_nsurg

# calculate average HKAA_diff_nsurg by BMI_CLASS
avg_by_class = df_diff_nsurg.groupby('BMI_CLASS')['HKAA_diff_nsurg'].mean().round(3)
print(avg_by_class)

# calculate HKAA_diff_nsurg standard deviation by BMI_CLASS
avg_std = df_diff_nsurg.groupby('BMI_CLASS')['HKAA_diff_nsurg'].std().round(3)
print(avg_std)

# 95% CI
lower_bound = avg_by_class - 2 * avg_std
upper_bound = avg_by_class + 2 * avg_std

# create a new dataframe to store the results
ci_df = pd.DataFrame({
    'Mean': avg_by_class,
    'Lower Bound (95% CI)': lower_bound,
    'Upper Bound (95% CI)': upper_bound,
})

print(ci_df)

for index, row in ci_df.iterrows():
    print(f"{row['Mean']:.3f} [{row['Lower Bound (95% CI)']:.3f}, {row['Upper Bound (95% CI)']:.3f}]")

# perform one-way ANOVA
f_value, p_value = stats.f_oneway(df_diff_nsurg['HKAA_diff_nsurg'][df_diff_nsurg['BMI_CLASS'] == -1],
                                  df_diff_nsurg['HKAA_diff_nsurg'][df_diff_nsurg['BMI_CLASS'] == 0],
                                  df_diff_nsurg['HKAA_diff_nsurg'][df_diff_nsurg['BMI_CLASS'] == 1],
                                  df_diff_nsurg['HKAA_diff_nsurg'][df_diff_nsurg['BMI_CLASS'] == 2],
                                  df_diff_nsurg['HKAA_diff_nsurg'][df_diff_nsurg['BMI_CLASS'] == 3],
                                  df_diff_nsurg['HKAA_diff_nsurg'][df_diff_nsurg['BMI_CLASS'] == 4])
print('F value:', f_value.round(3))
print('P value:', p_value.round(3))

"""There's statistically significant difference (p < 0.05) in the mean HKAA_diff_nsurg between the different BMI_CLASS groups."""

# post hoc test (Tukey HSD)
posthoc = multi.MultiComparison(df_diff_nsurg['HKAA_diff_nsurg'], df_diff_nsurg['BMI_CLASS'])
result = posthoc.tukeyhsd()
tukey_result_df = pd.DataFrame(data=result._results_table.data[1:], columns=result._results_table.data[0])
tukey_result_df

"""# Task 5: Pearson chi-square test

## Surgical leg varus / valgus / neutral rates vs obesity classes

### 3 degree cutoff
"""

# deformity class dataframe
df_dclass_surg_left = df_surg_left[['L_class_w_3_degree_cutoff', 'BMI_CLASS']].rename(columns = {'L_class_w_3_degree_cutoff' : 'class_w_3_degree_cutoff'})
df_dclass_surg_right = df_surg_right[['R_class_w_3_degree_cutoff','BMI_CLASS']].rename(columns = {'R_class_w_3_degree_cutoff' : 'class_w_3_degree_cutoff'})
df_dclass_surg = pd.concat([df_dclass_surg_left, df_dclass_surg_right])
df_dclass_surg = df_dclass_surg.dropna()
df_dclass_surg

# create a contingency table
contingency_table = pd.crosstab(df_dclass_surg['BMI_CLASS'], df_dclass_surg['class_w_3_degree_cutoff'])

print(contingency_table)

# perform chi-square test
chi2, p, dof, expected = stats.chi2_contingency(contingency_table)

print(f"Chi-square: {chi2.round(3)}")
print(f"P value: {p.round(3)}")

"""There is no statistically significant (p > 0.05) association between the BMI_CLASS and class_w_3_degree_cutoff.

### 2 degree cutoff
"""

# deformity class datafram
df_dclass_surg_left = df_surg_left[['L_class_w_2_degree_cutoff', 'BMI_CLASS']].rename(columns = {'L_class_w_2_degree_cutoff' : 'class_w_2_degree_cutoff'})
df_dclass_surg_right = df_surg_right[['R_class_w_2_degree_cutoff','BMI_CLASS']].rename(columns = {'R_class_w_2_degree_cutoff' : 'class_w_2_degree_cutoff'})
df_dclass_surg = pd.concat([df_dclass_surg_left, df_dclass_surg_right])
df_dclass_surg = df_dclass_surg.dropna()
df_dclass_surg

# create a contingency table
contingency_table = pd.crosstab(df_dclass_surg['BMI_CLASS'], df_dclass_surg['class_w_2_degree_cutoff'])

print(contingency_table)

# perform chi-square test
chi2, p, dof, expected = stats.chi2_contingency(contingency_table)

print(f"Chi-square statistic: {chi2.round(3)}")
print(f"P value: {p.round(3)}")

"""There is no statistically significant (p > 0.05) association between the BMI_CLASS and class_w_3_degree_cutoff."""