# -*- coding: utf-8 -*-
"""DL HKAA Statistical Analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wH92fHmrNyr6hPQjYgqrV2YWfOQgOecW

# Load Packages & Data
"""

import pkg_resources
try:
    pkg_resources.get_distribution('pingouin')
except pkg_resources.DistributionNotFound:
    !pip install pingouin

import pandas as pd
import numpy as np
import pingouin as pg
import scipy.stats as stats
import statsmodels.stats.multicomp as multi
import statsmodels.api as sm
pd.set_option('display.max.columns', None) # display all columns
pd.set_option('display.float_format', '{:.3f}'.format)

df = pd.read_excel('/content/drive/MyDrive/PT Research/data/final_updated_validation_dataset_v2.1.xlsx')
df.head()

"""# Task 1: DL model check (190 images difficult set)"""

# check for which records DL has null values
df[df["DL_R_HKAA"].isnull() | df["DL_L_HKAA"].isnull()][["RECORD_ID", "DL_R_HKAA", "DL_L_HKAA"]]

"""## Count the number of bilateral (both leg not null) HKAAs found by DL"""

DL_bilateral_count = df[['DL_R_HKAA', 'DL_L_HKAA']].notnull().all(axis=1).sum()
print(DL_bilateral_count)

"""## Count the number of surgical HKAAs found by DL"""

# LATERALITY 0 = right, 1 = left, 2 = bilateral
# exclude records which DL has null values
df_surg_right = df[((df['LATERALITY'] == 0) | (df['LATERALITY'] == 2)) & df['DL_R_HKAA'].notnull()]
df_surg_left = df[((df['LATERALITY'] == 1) | (df['LATERALITY'] == 2)) & df['DL_L_HKAA'].notnull()]

# rater avg surgical leg dataframe
df_avg_surg_left = df_surg_left[['RECORD_ID', 'L_HKAA_avg_of_raters']].rename(columns = {'L_HKAA_avg_of_raters' : 'HKAA_surg'})
df_avg_surg_right = df_surg_right[['RECORD_ID', 'R_HKAA_avg_of_raters']].rename(columns = {'R_HKAA_avg_of_raters' : 'HKAA_surg'})
df_avg_surg = pd.concat([df_avg_surg_left, df_avg_surg_right])
df_avg_surg['rater_id'] = 1

# DL surgical leg dataframe
df_surg_left_dl = df_surg_left[['RECORD_ID', 'DL_L_HKAA']].rename(columns = {'DL_L_HKAA' : 'HKAA_surg'})
df_surg_right_dl = df_surg_right[['RECORD_ID', 'DL_R_HKAA']].rename(columns = {'DL_R_HKAA' : 'HKAA_surg'})
df_surg_dl = pd.concat([df_surg_left_dl, df_surg_right_dl])
df_surg_dl['rater_id'] = 2

# rater avg non-surgical leg dataframe
df_avg_nsurg_left = df_surg_left[df_surg_left['DL_R_HKAA'].notnull()][['RECORD_ID', 'R_HKAA_avg_of_raters']].rename(columns = {'R_HKAA_avg_of_raters' : 'HKAA_nsurg'})
df_avg_nsurg_right = df_surg_right[df_surg_right['DL_L_HKAA'].notnull()][['RECORD_ID', 'L_HKAA_avg_of_raters']].rename(columns = {'L_HKAA_avg_of_raters' : 'HKAA_nsurg'})
df_avg_nsurg = pd.concat([df_avg_nsurg_left, df_avg_nsurg_right])
df_avg_nsurg['rater_id'] = 1

# DL non-surgical leg dataframe
df_nsurg_left_dl = df_surg_left[df_surg_left['DL_R_HKAA'].notnull()][['RECORD_ID', 'DL_R_HKAA']].rename(columns = {'DL_R_HKAA' : 'HKAA_nsurg'})
df_nsurg_right_dl = df_surg_right[df_surg_right['DL_L_HKAA'].notnull()][['RECORD_ID', 'DL_L_HKAA']].rename(columns = {'DL_L_HKAA' : 'HKAA_nsurg'})
df_nsurg_dl = pd.concat([df_nsurg_left_dl, df_nsurg_right_dl])
df_nsurg_dl['rater_id'] = 2

DL_surg_count = len(df_surg_dl)
print(DL_surg_count)

"""## IRR b/w DL and average human rater on the surgical vs non-surgical leg

### Surgical Leg
"""

# human rater
# calculate avg
df_avg_surg['HKAA_surg'].mean().round(3)

# dl
# calculate avg
df_surg_dl['HKAA_surg'].mean().round(3)

# combine rater and dl
df_surg = pd.concat([df_avg_surg, df_surg_dl])
df_surg

# IRR calculation
icc_surg = pg.intraclass_corr(data = df_surg, targets = 'RECORD_ID', raters = 'rater_id', ratings = 'HKAA_surg').round(3)
icc_surg.set_index('Type')

"""The interrater reliability is 0.974 for the surgical leg.

### Non-surgical Leg
"""

# human rater
# calculate avg
df_avg_nsurg['HKAA_nsurg'].mean().round(3)

# dl
# calculate avg
df_nsurg_dl['HKAA_nsurg'].mean().round(3)

# combine rater and dl
df_nsurg = pd.concat([df_avg_nsurg, df_nsurg_dl])
df_nsurg

# IRR calculation
icc_nsurg = pg.intraclass_corr(data = df_nsurg, targets = 'RECORD_ID', raters = 'rater_id', ratings = 'HKAA_nsurg').round(3)
icc_nsurg.set_index('Type')

"""The interrater reliability is 0.972 for the surgical leg.

# Task 2: DL model check (122 images test set)
"""

df2 = pd.read_csv('/content/drive/MyDrive/PT Research/data/updated_test_set_122_patients_DL_and_humans.csv')
df2.head()

# check for which records DL has null values
df2[df2["DL_R_HKAA"].isnull() | df["DL_L_HKAA"].isnull()][["RECORD_ID", "DL_R_HKAA", "DL_L_HKAA"]]

"""## Count the number of bilateral (both leg not null) HKAAs found by DL"""

DL_bilateral_count = df2[['DL_R_HKAA', 'DL_L_HKAA']].notnull().all(axis=1).sum()
print(DL_bilateral_count)

"""## Count the number of surgical HKAAs found by DL"""

# LATERALITY 0 = right, 1 = left, 2 = bilateral
# exclude records which DL has null values
df_surg_right2 = df2[((df['LATERALITY'] == 0) | (df2['LATERALITY'] == 2)) & df2['DL_R_HKAA'].notnull()]
df_surg_left2 = df2[((df['LATERALITY'] == 1) | (df2['LATERALITY'] == 2)) & df2['DL_L_HKAA'].notnull()]

# rater avg surgical leg dataframe
df_avg_surg_left2 = df_surg_left2[['RECORD_ID', 'L_HKAA_avg_of_raters']].rename(columns = {'L_HKAA_avg_of_raters' : 'HKAA_surg'})
df_avg_surg_right2 = df_surg_right2[['RECORD_ID', 'R_HKAA_avg_of_raters']].rename(columns = {'R_HKAA_avg_of_raters' : 'HKAA_surg'})
df_avg_surg2 = pd.concat([df_avg_surg_left2, df_avg_surg_right2])
df_avg_surg2['rater_id'] = 1

# DL surgical leg dataframe
df_surg_left_dl2 = df_surg_left2[['RECORD_ID', 'DL_L_HKAA']].rename(columns = {'DL_L_HKAA' : 'HKAA_surg'})
df_surg_right_dl2 = df_surg_right2[['RECORD_ID', 'DL_R_HKAA']].rename(columns = {'DL_R_HKAA' : 'HKAA_surg'})
df_surg_dl2 = pd.concat([df_surg_left_dl2, df_surg_right_dl2])
df_surg_dl2['rater_id'] = 2

# rater avg non-surgical leg dataframe
df_avg_nsurg_left2 = df_surg_left2[df_surg_left2['DL_R_HKAA'].notnull()][['RECORD_ID', 'R_HKAA_avg_of_raters']].rename(columns = {'R_HKAA_avg_of_raters' : 'HKAA_nsurg'})
df_avg_nsurg_right2 = df_surg_right2[df_surg_right2['DL_L_HKAA'].notnull()][['RECORD_ID', 'L_HKAA_avg_of_raters']].rename(columns = {'L_HKAA_avg_of_raters' : 'HKAA_nsurg'})
df_avg_nsurg2 = pd.concat([df_avg_nsurg_left2, df_avg_nsurg_right2])
df_avg_nsurg2['rater_id'] = 1

# DL non-surgical leg dataframe
df_nsurg_left_dl2 = df_surg_left2[df_surg_left2['DL_R_HKAA'].notnull()][['RECORD_ID', 'DL_R_HKAA']].rename(columns = {'DL_R_HKAA' : 'HKAA_nsurg'})
df_nsurg_right_dl2 = df_surg_right2[df_surg_right2['DL_L_HKAA'].notnull()][['RECORD_ID', 'DL_L_HKAA']].rename(columns = {'DL_L_HKAA' : 'HKAA_nsurg'})
df_nsurg_dl2 = pd.concat([df_nsurg_left_dl2, df_nsurg_right_dl2])
df_nsurg_dl2['rater_id'] = 2

DL_surg_count2 = len(df_surg_dl2)
print(DL_surg_count2)

"""## IRR b/w DL and average human rater on the surgical vs non-surgical leg

### Surgical Leg
"""

# human rater
# calculate avg
df_avg_surg2['HKAA_surg'].mean().round(3)

df_avg_surg2['HKAA_surg'].std().round(3)

# dl
# calculate avg
df_surg_dl2['HKAA_surg'].mean().round(3)

df_surg_dl2['HKAA_surg'].std().round(3)

# combine rater and dl
df_surg2 = pd.concat([df_avg_surg2, df_surg_dl2])
df_surg2

# IRR calculation
icc_surg2 = pg.intraclass_corr(data = df_surg2, targets = 'RECORD_ID', raters = 'rater_id', ratings = 'HKAA_surg').round(3)
icc_surg2.set_index('Type')

"""The interrater reliability is 0.991 for the surgical leg.

### Non-surgical Leg
"""

# human rater
# calculate avg
df_avg_nsurg2['HKAA_nsurg'].mean().round(3)

df_avg_nsurg2['HKAA_nsurg'].std().round(3)

# dl
# calculate avg
df_nsurg_dl2['HKAA_nsurg'].mean().round(3)

df_nsurg_dl2['HKAA_nsurg'].std().round(3)

# combine rater and dl
df_nsurg2 = pd.concat([df_avg_nsurg2, df_nsurg_dl2])
df_nsurg2

# IRR calculation
icc_nsurg2 = pg.intraclass_corr(data = df_nsurg2, targets = 'RECORD_ID', raters = 'rater_id', ratings = 'HKAA_nsurg').round(3)
icc_nsurg2.set_index('Type')

"""The interrater reliability is 0.988 for the surgical leg.

# Task 9: DL model comparison
"""

def calculate_z_test(count1, nobs1, count2, nobs2):
    count = [count1, count2]
    nobs = [nobs1, nobs2]
    z, p_value = sm.stats.proportions_ztest(count, nobs, alternative='two-sided')
    return z, p_value

# Operative Limb
count1_op = 124
nobs1_op = 124
count2_op = 156
nobs2_op = 163
z_op, p_value_op = calculate_z_test(count1_op, nobs1_op, count2_op, nobs2_op)
print(f"Operative Limb: z = {z_op:.4f}, p-value = {p_value_op:.4f}")

# Non-operative Limb
count1_non_op = 119
nobs1_non_op = 120
count2_non_op = 143
nobs2_non_op = 153
z_non_op, p_value_non_op = calculate_z_test(count1_non_op, nobs1_non_op, count2_non_op, nobs2_non_op)
print(f"Non-operative Limb: z = {z_non_op:.4f}, p-value = {p_value_non_op:.4f}")

# OP
# Neutral
# DL test vs DL difficult
z, p = calculate_z_test(30, 124, 27, 156)
print(f"z = {z:.3f}, p = {p:.3f}")

# OP
# Varus
# DL test vs DL difficult
z, p = calculate_z_test(77, 124, 110, 156)
print(f"z = {z:.3f}, p = {p:.3f}")

# OP
# Valgus
# DL test vs DL difficult
z, p = calculate_z_test(17, 124, 19, 156)
print(f"z = {z:.3f}, p = {p:.3f}")

# NOP
# Neutral
# DL test vs DL difficult
z, p = calculate_z_test(52, 119, 58, 143)
print(f"z = {z:.3f}, p = {p:.3f}")

# NOP
# Varus
# DL test vs DL difficult
z, p = calculate_z_test(60, 119, 75, 143)
print(f"z = {z:.3f}, p = {p:.3f}")

# NOP
# Valgus
# DL test vs DL difficult
z, p = calculate_z_test(7, 119, 10, 143)
print(f"z = {z:.3f}, p = {p:.3f}")